#!/usr/bin/env python
# -*- coding: utf-8 -*-

### Import modules ###
import argparse
import sys
import numpy as np
import pandas as pd
######################

# func
def sm2m(
    inputfile, 
    delim, 
    ):

    # read a file

    if (inputfile == None):
        handle = sys.stdin
    else:
        handle = open(inputfile, 'r')  # format: row_name<delim>column_name<delim>value

    row_set          = set()
    column_set       = set()
    row2column2value = {}
    for line in handle:
        words = line.split(delim)

        row_set.add(words[0])
        column_set.add(words[1])

        if words[0] not in row2column2value.keys():
            row2column2value[words[0]]={}
        if words[1] not in row2column2value[words[0]].keys():
            row2column2value[words[0]][words[1]]={}
        row2column2value[words[0]][words[1]] = float(words[2])
    handle.close()

    row_list    = list(row_set)   ; row_list.sort()
    column_list = list(column_set); column_list.sort()

    matrix = np.zeros((len(row_list), len(column_list)))

    rowname2idx    = {}
    columnname2idx = {}
    for idx, rowname in enumerate(row_list):
        rowname2idx[rowname]       = idx
    for idx, columnname in enumerate(column_list):
        columnname2idx[columnname] = idx
    
    for rowname in row2column2value.keys():
        for columnname in row2column2value[rowname].keys():
            matrix[rowname2idx[rowname]][columnname2idx[columnname]] = row2column2value[rowname][columnname]
    
    df = pd.DataFrame(matrix, index = row_list, columns = column_list)

    df.to_csv(sys.stdout, sep = delim)

# interface
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='csvonehot', add_help=True)
    
    parser.add_argument(
        "-v", "--version",
        help="Print table rep version",
        action='store_true',
        default=False
        )

    parser.add_argument(
        "-i", "--input",
        help="Input file path",
        default=None
        )
    
    parser.add_argument(
        "--delim",
        help="delimitter between key and value",
        default="\t"
        )
        
    # parse arguments
    args = parser.parse_args()

    # execute main_function()
    sm2m(  
        inputfile = args.input          ,
        delim     = args.delim          ,
    )