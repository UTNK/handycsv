#!/usr/bin/env python
# -*- coding: utf-8 -*-

### Import modules ###
import module.mylink as mylink
from statistics import mean, median, mode
import argparse
import random
import sys
######################

# func
def csvrep(inputfile, represent, key_column, value_column, delim,seed):

    random.seed(seed)

    key_column   -= 1
    value_column -= 1

    # read file
    if (inputfile == None):
        inhandle = sys.stdin
        inputfile = "stdin.txt"
    else:
        inhandle = open(inputfile,'r')

    if (represent == "random" or represent == "count" ):
        myhash_before, key_list = mylink.make_hash3(inhandle, key_column, value_column, delim=delim, value_type="str", out_key=True)
    
    else:
        myhash_before, key_list = mylink.make_hash3(inhandle, key_column, value_column, delim=delim, value_type="float", out_key=True)
    
    myhash_after  = {}
    
    for key in myhash_before.keys():
        
        if (represent   == "mean"  ):
            myhash_after[key] = mean(myhash_before[key])
        
        elif (represent == "median"):
            
            myhash_after[key] = median(myhash_before[key])
        
        elif (represent == "mode"  ):
            myhash_after[key] = mode(myhash_before[key])
        
        elif (represent == "random"  ):
            myhash_after[key] = random.choice(myhash_before[key])
        
        elif (represent == "sum"  ):
            myhash_after[key] = sum(myhash_before[key])
        
        elif (represent == "max"  ):
            myhash_after[key] = max(myhash_before[key])

        elif (represent == "count"):
            myhash_after[key] = len(set(myhash_before[key]))
    
    mylink.export_hash(myhash_after, delim=delim, key_list=key_list)

# interface
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='csvrep', add_help=True)
    
    parser.add_argument(
        "-v", "--version",
        help="Print table rep version",
        action='store_true',
        default=False
        )

    parser.add_argument(
        "-i", "--input",
        help="Input file path",
        default=None
        )
    
    parser.add_argument(
        "-r", "--represent",
        help="Choose which value to calculate: \'mean\', \'median\', \'mode\', 'sum', 'count', or 'random'",
        default="mean"
        )
    
    parser.add_argument(
        "-c", "--column",
        help="Choose 2 columns served as key and value respectively",
        default="1,2",
        )
    
    parser.add_argument(
        "-d", "--delimitter",
        help="Specify the delimitter",
        default="\t"
        )
    
    parser.add_argument(
        "-s", "--seed",
        help="Random seed (Integer)",
        default=0
        )
    
    # parse arguments
    args = parser.parse_args()

    # execute main_function()
    csvrep( inputfile    = args.input                    , 
            represent    = args.represent                , 
            key_column   = int(args.column.split(",")[0]), 
            value_column = int(args.column.split(",")[1]), 
            delim        = args.delimitter               ,
            seed         = args.seed
            )